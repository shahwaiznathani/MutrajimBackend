"C:\Users\Shahwaiz Nathani\Desktop\k180288-IPT Assignment 2\k180288_Q2\k180288_Q\bin\Debug\k180288_Q2.exe"
desktop-2jro2kq\shahwaiz nathani

"C:\Users\Shahwaiz Nathani\Desktop\k180288-IPT Assignment 2\k180288_Q3\k180288_Q3\bin\Debug\k180288_Q3.exe"

C:\Windows\Microsoft.NET\Framework64\v4.0.30319

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.ServiceModel.Syndication;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.Xml;
using System.Xml.Serialization;

namespace question_no_2
{
    public class NewsItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime PublishedDate { get; set; }
        public string NewsChannel { get; set; }
        public NewsItem()
        {
        }
        public NewsItem(string t, string d, DateTime pd, string nc)
        {
            Title = t;
            Description = d;
            PublishedDate = pd;
            NewsChannel = nc;
        }
    }
    public partial class Service1 : ServiceBase
    {
        Timer timer = new Timer();
        public Service1()
        {
            InitializeComponent();
        }
        static void rssFeed()
        {
            try
            {
                string[] urls = { "https://feeds.feedburner.com/geo/GiKR", "https://nation.com.pk/rss/top-stories" };
                List<NewsItem> news = new List<NewsItem>();
                foreach (string url in urls)
                {
                    XmlReaderSettings settings = new XmlReaderSettings();
                    settings.DtdProcessing = DtdProcessing.Parse;
                    settings.MaxCharactersFromEntities = 1024;
                    XmlReader reader = XmlReader.Create(url, settings);
                    SyndicationFeed feed = SyndicationFeed.Load(reader);
                    String channelName = feed.Title.Text;
                    Console.WriteLine($"{channelName} channelName");
                    reader.Close();
                    foreach (SyndicationItem item in feed.Items)
                    {
                        String subject = item.Title.Text;
                        String summary = item.Summary.Text;
                        DateTime date = item.PublishDate.UtcDateTime;
                        NewsItem story = new NewsItem(subject, summary, date, channelName);
                        news.Add(story);

                    }
                }
                var xs = new XmlSerializer(typeof(List<NewsItem>));
                string fileName = ConfigurationManager.AppSettings.Get("fileName");
                FileStream fs = new FileStream(fileName, FileMode.Create);
                List<NewsItem> sortedNews = news.OrderByDescending(o => o.PublishedDate).ToList();

                xs.Serialize(fs, sortedNews);
                fs.Close();

                foreach (NewsItem n in sortedNews)
                {
                    Console.WriteLine($"{n.PublishedDate} {n.Title} title");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Something went wrong");
                Console.WriteLine(ex.Message);
            }
        }
        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            rssFeed();
        }


        protected override void OnStart(string[] args)
        {
            rssFeed();
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            timer.Interval = 300000;
            timer.Enabled = true;
        }

        protected override void OnStop()
        {
            Console.WriteLine("Service Stopped");
        }
    }
}










                //Console.WriteLine($"{subject} subject");
                //Console.WriteLine($"{summary} summary");
                //Console.WriteLine($"{date} date");
                //NewsItem story = new NewsItem(subject, summary, date, channelName);